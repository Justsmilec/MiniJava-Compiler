
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Mar 31 12:10:24 EDT 2015
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import syntaxtree.*;
import visitor.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Mar 31 12:10:24 EDT 2015
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\071\000\002\002\004\000\002\002\004\000\002\003" +
    "\023\000\002\003\022\000\002\004\010\000\002\004\012" +
    "\000\002\004\004\000\002\005\004\000\002\005\002\000" +
    "\002\006\005\000\002\006\005\000\002\006\005\000\002" +
    "\007\004\000\002\007\002\000\002\010\016\000\002\010" +
    "\020\000\002\010\004\000\002\011\004\000\002\011\002" +
    "\000\002\012\005\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\014\004\000\002\014\004\000\002" +
    "\013\006\000\002\013\002\000\002\015\005\000\002\015" +
    "\011\000\002\015\007\000\002\015\007\000\002\015\006" +
    "\000\002\015\011\000\002\015\004\000\002\016\004\000" +
    "\002\016\002\000\002\017\005\000\002\017\005\000\002" +
    "\017\005\000\002\017\005\000\002\017\005\000\002\017" +
    "\006\000\002\017\005\000\002\017\007\000\002\017\011" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\007\000\002" +
    "\017\006\000\002\017\004\000\002\017\005\000\002\020" +
    "\005\000\002\020\002\000\002\021\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\247\000\004\025\006\001\002\000\004\002\251\001" +
    "\002\000\010\002\ufff9\003\147\025\150\001\002\000\004" +
    "\047\010\001\002\000\004\007\011\001\002\000\044\003" +
    "\uffc9\004\uffc9\005\uffc9\006\uffc9\007\uffc9\011\uffc9\012\uffc9" +
    "\013\uffc9\014\uffc9\015\uffc9\016\uffc9\020\uffc9\021\uffc9\022" +
    "\uffc9\023\uffc9\027\uffc9\047\uffc9\001\002\000\004\036\012" +
    "\001\002\000\004\040\013\001\002\000\004\045\014\001" +
    "\002\000\004\034\015\001\002\000\004\011\016\001\002" +
    "\000\004\041\017\001\002\000\004\013\020\001\002\000" +
    "\004\014\021\001\002\000\004\047\010\001\002\000\004" +
    "\012\023\001\002\000\004\007\024\001\002\000\020\003" +
    "\032\007\033\010\034\031\027\042\026\046\025\047\010" +
    "\001\002\000\004\011\142\001\002\000\004\011\136\001" +
    "\002\000\004\011\130\001\002\000\006\013\046\023\045" +
    "\001\002\000\004\010\043\001\002\000\004\006\042\001" +
    "\002\000\020\003\032\007\033\010\uffde\031\027\042\026" +
    "\046\025\047\010\001\002\000\004\010\035\001\002\000" +
    "\010\002\ufffe\003\ufffe\025\ufffe\001\002\000\004\010\041" +
    "\001\002\000\022\003\032\007\033\010\uffde\031\027\037" +
    "\uffde\042\026\046\025\047\010\001\002\000\006\010\uffdf" +
    "\037\uffdf\001\002\000\024\003\uffe6\007\uffe6\010\uffe6\026" +
    "\uffe6\031\uffe6\037\uffe6\042\uffe6\046\uffe6\047\uffe6\001\002" +
    "\000\024\003\uffe0\007\uffe0\010\uffe0\026\uffe0\031\uffe0\037" +
    "\uffe0\042\uffe0\046\uffe0\047\uffe0\001\002\000\004\010\044" +
    "\001\002\000\010\002\uffff\003\uffff\025\uffff\001\002\000" +
    "\022\011\057\017\056\030\052\035\050\043\055\044\051" +
    "\047\010\050\047\001\002\000\022\011\057\017\056\030" +
    "\052\035\050\043\055\044\051\047\010\050\047\001\002" +
    "\000\030\004\uffd4\005\uffd4\006\uffd4\012\uffd4\013\uffd4\014" +
    "\uffd4\015\uffd4\016\uffd4\020\uffd4\021\uffd4\022\uffd4\001\002" +
    "\000\006\032\120\047\010\001\002\000\030\004\uffd3\005" +
    "\uffd3\006\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3" +
    "\020\uffd3\021\uffd3\022\uffd3\001\002\000\030\004\uffd2\005" +
    "\uffd2\006\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2\016\uffd2" +
    "\020\uffd2\021\uffd2\022\uffd2\001\002\000\030\004\uffd1\005" +
    "\uffd1\006\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1\016\uffd1" +
    "\020\uffd1\021\uffd1\022\uffd1\001\002\000\022\004\070\013" +
    "\062\014\113\015\063\016\067\020\061\021\066\022\064" +
    "\001\002\000\030\004\uffd0\005\uffd0\006\uffd0\012\uffd0\013" +
    "\uffd0\014\uffd0\015\uffd0\016\uffd0\020\uffd0\021\uffd0\022\uffd0" +
    "\001\002\000\022\011\057\017\056\030\052\035\050\043" +
    "\055\044\051\047\010\050\047\001\002\000\022\011\057" +
    "\017\056\030\052\035\050\043\055\044\051\047\010\050" +
    "\047\001\002\000\022\004\070\012\065\013\062\015\063" +
    "\016\067\020\061\021\066\022\064\001\002\000\022\011" +
    "\057\017\056\030\052\035\050\043\055\044\051\047\010" +
    "\050\047\001\002\000\022\011\057\017\056\030\052\035" +
    "\050\043\055\044\051\047\010\050\047\001\002\000\022" +
    "\011\057\017\056\030\052\035\050\043\055\044\051\047" +
    "\010\050\047\001\002\000\022\011\057\017\056\030\052" +
    "\035\050\043\055\044\051\047\010\050\047\001\002\000" +
    "\030\004\uffcc\005\uffcc\006\uffcc\012\uffcc\013\uffcc\014\uffcc" +
    "\015\uffcc\016\uffcc\020\uffcc\021\uffcc\022\uffcc\001\002\000" +
    "\022\011\057\017\056\030\052\035\050\043\055\044\051" +
    "\047\010\050\047\001\002\000\022\011\057\017\056\030" +
    "\052\035\050\043\055\044\051\047\010\050\047\001\002" +
    "\000\006\033\072\047\010\001\002\000\004\011\073\001" +
    "\002\000\030\004\uffd7\005\uffd7\006\uffd7\012\uffd7\013\uffd7" +
    "\014\uffd7\015\uffd7\016\uffd7\020\uffd7\021\uffd7\022\uffd7\001" +
    "\002\000\024\011\057\012\075\017\056\030\052\035\050" +
    "\043\055\044\051\047\010\050\047\001\002\000\024\004" +
    "\070\005\077\012\uffca\013\062\015\063\016\067\020\061" +
    "\021\066\022\064\001\002\000\030\004\uffd6\005\uffd6\006" +
    "\uffd6\012\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6\020\uffd6" +
    "\021\uffd6\022\uffd6\001\002\000\004\012\102\001\002\000" +
    "\022\011\057\017\056\030\052\035\050\043\055\044\051" +
    "\047\010\050\047\001\002\000\024\004\070\005\077\012" +
    "\uffca\013\062\015\063\016\067\020\061\021\066\022\064" +
    "\001\002\000\004\012\uffcb\001\002\000\030\004\uffd5\005" +
    "\uffd5\006\uffd5\012\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5" +
    "\020\uffd5\021\uffd5\022\uffd5\001\002\000\030\004\uffdc\005" +
    "\uffdc\006\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc" +
    "\020\061\021\066\022\064\001\002\000\030\004\uffda\005" +
    "\uffda\006\uffda\012\uffda\013\uffda\014\uffda\015\uffda\016\uffda" +
    "\020\061\021\uffda\022\uffda\001\002\000\030\004\uffdb\005" +
    "\uffdb\006\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb" +
    "\020\061\021\uffdb\022\uffdb\001\002\000\030\004\uffdd\005" +
    "\uffdd\006\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd\016\067" +
    "\020\061\021\066\022\064\001\002\000\022\004\070\013" +
    "\062\014\110\015\063\016\067\020\061\021\066\022\064" +
    "\001\002\000\030\004\uffd8\005\uffd8\006\uffd8\012\uffd8\013" +
    "\uffd8\014\uffd8\015\uffd8\016\uffd8\020\uffd8\021\uffd8\022\uffd8" +
    "\001\002\000\030\004\uffd9\005\uffd9\006\uffd9\012\uffd9\013" +
    "\uffd9\014\uffd9\015\uffd9\016\uffd9\020\uffd9\021\uffd9\022\uffd9" +
    "\001\002\000\030\004\uffcd\005\uffcd\006\uffcd\012\uffcd\013" +
    "\uffcd\014\uffcd\015\uffcd\016\uffcd\020\uffcd\021\uffcd\022\uffcd" +
    "\001\002\000\004\023\114\001\002\000\022\011\057\017" +
    "\056\030\052\035\050\043\055\044\051\047\010\050\047" +
    "\001\002\000\022\004\070\006\116\013\062\015\063\016" +
    "\067\020\061\021\066\022\064\001\002\000\024\003\uffe1" +
    "\007\uffe1\010\uffe1\026\uffe1\031\uffe1\037\uffe1\042\uffe1\046" +
    "\uffe1\047\uffe1\001\002\000\004\011\124\001\002\000\004" +
    "\013\121\001\002\000\022\011\057\017\056\030\052\035" +
    "\050\043\055\044\051\047\010\050\047\001\002\000\022" +
    "\004\070\013\062\014\123\015\063\016\067\020\061\021" +
    "\066\022\064\001\002\000\030\004\uffcf\005\uffcf\006\uffcf" +
    "\012\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf\020\uffcf\021" +
    "\uffcf\022\uffcf\001\002\000\004\012\125\001\002\000\030" +
    "\004\uffce\005\uffce\006\uffce\012\uffce\013\uffce\014\uffce\015" +
    "\uffce\016\uffce\020\uffce\021\uffce\022\uffce\001\002\000\022" +
    "\004\070\006\127\013\062\015\063\016\067\020\061\021" +
    "\066\022\064\001\002\000\024\003\uffe2\007\uffe2\010\uffe2" +
    "\026\uffe2\031\uffe2\037\uffe2\042\uffe2\046\uffe2\047\uffe2\001" +
    "\002\000\022\011\057\017\056\030\052\035\050\043\055" +
    "\044\051\047\010\050\047\001\002\000\022\004\070\012" +
    "\132\013\062\015\063\016\067\020\061\021\066\022\064" +
    "\001\002\000\016\003\032\007\033\031\027\042\026\046" +
    "\025\047\010\001\002\000\004\026\134\001\002\000\016" +
    "\003\032\007\033\031\027\042\026\046\025\047\010\001" +
    "\002\000\024\003\uffe5\007\uffe5\010\uffe5\026\uffe5\031\uffe5" +
    "\037\uffe5\042\uffe5\046\uffe5\047\uffe5\001\002\000\022\011" +
    "\057\017\056\030\052\035\050\043\055\044\051\047\010" +
    "\050\047\001\002\000\022\004\070\012\140\013\062\015" +
    "\063\016\067\020\061\021\066\022\064\001\002\000\004" +
    "\006\141\001\002\000\024\003\uffe3\007\uffe3\010\uffe3\026" +
    "\uffe3\031\uffe3\037\uffe3\042\uffe3\046\uffe3\047\uffe3\001\002" +
    "\000\022\011\057\017\056\030\052\035\050\043\055\044" +
    "\051\047\010\050\047\001\002\000\022\004\070\012\144" +
    "\013\062\015\063\016\067\020\061\021\066\022\064\001" +
    "\002\000\016\003\032\007\033\031\027\042\026\046\025" +
    "\047\010\001\002\000\024\003\uffe4\007\uffe4\010\uffe4\026" +
    "\uffe4\031\uffe4\037\uffe4\042\uffe4\046\uffe4\047\uffe4\001\002" +
    "\000\004\002\000\001\002\000\004\010\250\001\002\000" +
    "\004\047\010\001\002\000\010\002\ufff9\003\147\025\150" +
    "\001\002\000\004\002\ufffa\001\002\000\006\007\155\027" +
    "\154\001\002\000\004\047\010\001\002\000\016\003\ufff4" +
    "\010\ufff4\024\ufff4\032\ufff4\036\ufff4\047\ufff4\001\002\000" +
    "\016\003\167\010\uffef\024\162\032\157\036\161\047\010" +
    "\001\002\000\010\003\uffec\013\241\047\uffec\001\002\000" +
    "\004\010\240\001\002\000\010\024\162\032\157\047\010" +
    "\001\002\000\006\003\uffed\047\uffed\001\002\000\030\003" +
    "\ufff5\007\ufff5\010\ufff5\024\ufff5\031\ufff5\032\ufff5\036\ufff5" +
    "\037\ufff5\042\ufff5\046\ufff5\047\ufff5\001\002\000\006\003" +
    "\uffeb\047\uffeb\001\002\000\006\003\176\047\010\001\002" +
    "\000\010\003\174\010\uffef\036\161\001\002\000\006\010" +
    "\171\047\010\001\002\000\004\006\172\001\002\000\010" +
    "\003\ufff1\010\ufff1\036\ufff1\001\002\000\030\003\ufff6\007" +
    "\ufff6\010\ufff6\024\ufff6\031\ufff6\032\ufff6\036\ufff6\037\ufff6" +
    "\042\ufff6\046\ufff6\047\ufff6\001\002\000\004\010\ufff0\001" +
    "\002\000\004\010\171\001\002\000\004\006\200\001\002" +
    "\000\004\006\177\001\002\000\030\003\ufff7\007\ufff7\010" +
    "\ufff7\024\ufff7\031\ufff7\032\ufff7\036\ufff7\037\ufff7\042\ufff7" +
    "\046\ufff7\047\ufff7\001\002\000\030\003\ufff8\007\ufff8\010" +
    "\ufff8\024\ufff8\031\ufff8\032\ufff8\036\ufff8\037\ufff8\042\ufff8" +
    "\046\ufff8\047\ufff8\001\002\000\004\047\010\001\002\000" +
    "\004\011\203\001\002\000\012\012\205\024\162\032\157" +
    "\047\010\001\002\000\004\047\010\001\002\000\004\007" +
    "\206\001\002\000\024\003\ufff4\007\ufff4\024\ufff4\031\ufff4" +
    "\032\ufff4\037\ufff4\042\ufff4\046\ufff4\047\ufff4\001\002\000" +
    "\024\003\212\007\033\024\162\031\027\032\157\037\uffde" +
    "\042\026\046\025\047\010\001\002\000\004\037\213\001" +
    "\002\000\012\003\uffeb\013\046\023\045\047\uffeb\001\002" +
    "\000\006\006\042\047\010\001\002\000\022\011\057\017" +
    "\056\030\052\035\050\043\055\044\051\047\010\050\047" +
    "\001\002\000\022\004\070\006\215\013\062\015\063\016" +
    "\067\020\061\021\066\022\064\001\002\000\004\010\216" +
    "\001\002\000\010\003\ufff3\010\ufff3\036\ufff3\001\002\000" +
    "\010\003\221\005\220\012\uffe7\001\002\000\010\024\162" +
    "\032\157\047\010\001\002\000\004\012\234\001\002\000" +
    "\004\012\233\001\002\000\004\007\224\001\002\000\024" +
    "\003\ufff4\007\ufff4\024\ufff4\031\ufff4\032\ufff4\037\ufff4\042" +
    "\ufff4\046\ufff4\047\ufff4\001\002\000\024\003\212\007\033" +
    "\024\162\031\027\032\157\037\uffde\042\026\046\025\047" +
    "\010\001\002\000\004\037\227\001\002\000\022\011\057" +
    "\017\056\030\052\035\050\043\055\044\051\047\010\050" +
    "\047\001\002\000\022\004\070\006\231\013\062\015\063" +
    "\016\067\020\061\021\066\022\064\001\002\000\004\010" +
    "\232\001\002\000\010\003\ufff2\010\ufff2\036\ufff2\001\002" +
    "\000\004\007\uffea\001\002\000\004\007\uffe9\001\002\000" +
    "\004\047\010\001\002\000\006\005\220\012\uffe7\001\002" +
    "\000\004\012\uffe8\001\002\000\010\002\ufffd\003\ufffd\025" +
    "\ufffd\001\002\000\004\014\242\001\002\000\006\003\uffee" +
    "\047\uffee\001\002\000\004\007\244\001\002\000\016\003" +
    "\ufff4\010\ufff4\024\ufff4\032\ufff4\036\ufff4\047\ufff4\001\002" +
    "\000\016\003\167\010\uffef\024\162\032\157\036\161\047" +
    "\010\001\002\000\004\010\247\001\002\000\010\002\ufffc" +
    "\003\ufffc\025\ufffc\001\002\000\010\002\ufffb\003\ufffb\025" +
    "\ufffb\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\247\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\006\004\150\005\145\001\001\000\004\021\006" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\015\030\021\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\015" +
    "\036\016\035\021\027\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\015\036\016\037\021" +
    "\027\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\017" +
    "\125\021\052\001\001\000\006\017\053\021\052\001\001" +
    "\000\002\001\001\000\004\021\116\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\017\111\021\052\001\001\000" +
    "\006\017\057\021\052\001\001\000\002\001\001\000\006" +
    "\017\110\021\052\001\001\000\006\017\106\021\052\001" +
    "\001\000\006\017\105\021\052\001\001\000\006\017\104" +
    "\021\052\001\001\000\002\001\001\000\006\017\103\021" +
    "\052\001\001\000\006\017\102\021\052\001\001\000\004" +
    "\021\070\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\017\073\021\052\001\001\000\004\020\075\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\017\077\021" +
    "\052\001\001\000\004\020\100\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\017\114\021\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\017\121\021\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\017\130\021\052\001\001" +
    "\000\002\001\001\000\006\015\132\021\027\001\001\000" +
    "\002\001\001\000\006\015\134\021\027\001\001\000\002" +
    "\001\001\000\006\017\136\021\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\017\142" +
    "\021\052\001\001\000\002\001\001\000\006\015\144\021" +
    "\027\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\152\001\001\000\006\004\150\005" +
    "\151\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\242\001\001\000\004\007\155\001\001\000\014\006" +
    "\162\010\165\011\157\012\164\021\163\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\012\200\021\163\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\174\001\001\000\006\010\165\011\172\001" +
    "\001\000\004\021\167\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\201\001\001\000\002\001" +
    "\001\000\006\012\203\021\163\001\001\000\004\021\216" +
    "\001\001\000\002\001\001\000\004\007\206\001\001\000" +
    "\014\006\162\012\164\015\036\016\207\021\210\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\167\001" +
    "\001\000\006\017\213\021\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\013\221\014" +
    "\222\001\001\000\006\012\234\021\163\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\224\001\001\000\014\006\162\012\164\015\036\016\225" +
    "\021\210\001\001\000\002\001\001\000\006\017\227\021" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\235\001\001\000\004\013\236\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\244\001\001\000\014\006\162" +
    "\010\165\011\245\012\164\021\163\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.next_token(); 
    }

 Lexer lexer;
boolean errorDetected;
public Parser(Lexer lex) { super(lex); lexer = lex; errorDetected = false; }
public void syntax_error(Symbol cur_token) { 
				errorDetected = true;
				System.err.println("Parse error at line " + cur_token.left + ", column " + cur_token.right); }
 
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // identifier ::= IDENTIFIER 
            {
              Identifier RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Identifier(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expressionChain ::= 
            {
              ExpList RESULT =null;
		 RESULT = new ExpList(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressionChain",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expressionChain ::= COMMA expression expressionChain 
            {
              ExpList RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ecleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpList ec = (ExpList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(ec == null)
							ec = new ExpList();
							
						ec.addElement(e1);
						
						RESULT = ec;
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressionChain",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expression ::= LEFTPAREN expression RIGHTPAREN 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expression ::= EXCLAMATION expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Not(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expression ::= NEW identifier LEFTPAREN RIGHTPAREN 
            {
              Exp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new NewObject(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expression ::= NEW INT LEFTBRACKET expression RIGHTBRACKET 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NewArray(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expression ::= THIS 
            {
              Exp RESULT =null;
		 RESULT = new This(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expression ::= identifier 
            {
              Exp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IdentifierExp(id.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expression ::= FALSE 
            {
              Exp RESULT =null;
		 RESULT = new False(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expression ::= TRUE 
            {
              Exp RESULT =null;
		 RESULT = new True(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expression ::= INTEGER 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IntegerLiteral(i.intValue()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expression ::= expression PERIOD identifier LEFTPAREN expression expressionChain RIGHTPAREN 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ecleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpList ec = (ExpList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
					//Create a new list and add "e2" as the first argument.  Then add any from the expressionChain
					ExpList list = new ExpList();
					list.addElement(e2);
					
					for(int i = 0; i < ec.size(); i++)
					{
						list.addElement(ec.elementAt(i));
					}
					
					RESULT = new Call(e1, id, list); 
			   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expression ::= expression PERIOD identifier LEFTPAREN RIGHTPAREN 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
					ExpList ec = new ExpList();
					RESULT = new Call(e1, id, ec); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expression ::= expression PERIOD LENGTH 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new ArrayLength(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expression ::= expression LEFTBRACKET expression RIGHTBRACKET 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ArrayLookup(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expression ::= expression STAR expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Times(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expression ::= expression MINUS expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Minus(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expression ::= expression PLUS expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Plus(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expression ::= expression LESSTHAN expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LessThan(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expression ::= expression AND expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new And(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // statementChain ::= 
            {
              StatementList RESULT =null;
		 RESULT = new StatementList(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statementChain",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statementChain ::= statement statementChain 
            {
              StatementList RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statement stmt = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int scright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StatementList sc = (StatementList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(sc == null)
							sc = new StatementList();
							
						sc.addElement(stmt);
						
						RESULT = sc;
				   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statementChain",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statement ::= error SEMICOLON 
            {
              Statement RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statement ::= identifier LEFTBRACKET expression RIGHTBRACKET ASSIGNMENT expression SEMICOLON 
            {
              Statement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ArrayAssign(id, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statement ::= identifier ASSIGNMENT expression SEMICOLON 
            {
              Statement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Assign(id, e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statement ::= PRINTLN LEFTPAREN expression RIGHTPAREN SEMICOLON 
            {
              Statement RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Print(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statement ::= WHILE LEFTPAREN expression RIGHTPAREN statement 
            {
              Statement RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new While(e1, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statement ::= IF LEFTPAREN expression RIGHTPAREN statement ELSE statement 
            {
              Statement RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Statement s1 = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s2 = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new If(e1, s1, s2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statement ::= LEFTCURLY statementChain RIGHTCURLY 
            {
              Statement RESULT =null;
		int scleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StatementList sc = (StatementList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Block(sc); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // typeChain ::= 
            {
              FormalList RESULT =null;
		 RESULT = new FormalList(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typeChain",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // typeChain ::= COMMA type identifier typeChain 
            {
              FormalList RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FormalList tc = (FormalList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				//Wrap type/id in a Formal
				Formal temp = new Formal(t, id);
				
				if(tc == null)
					tc = new FormalList();
					
				tc.addElement(temp);
				
				RESULT = tc;
			  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typeChain",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // typeChainParen ::= error RIGHTPAREN 
            {
              FormalList RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typeChainParen",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // typeChainParen ::= typeChain RIGHTPAREN 
            {
              FormalList RESULT =null;
		int tcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		FormalList tc = (FormalList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = tc; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typeChainParen",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // type ::= identifier 
            {
              Type RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IdentifierType(id.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // type ::= INT 
            {
              Type RESULT =null;
		 RESULT = new IntegerType(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // type ::= BOOLEAN 
            {
              Type RESULT =null;
		 RESULT = new BooleanType(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // type ::= INT LEFTBRACKET RIGHTBRACKET 
            {
              Type RESULT =null;
		 RESULT = new IntArrayType(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // methodDeclarationChain ::= 
            {
              MethodDeclList RESULT =null;
		 RESULT = new MethodDeclList(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methodDeclarationChain",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // methodDeclarationChain ::= methodDeclaration methodDeclarationChain 
            {
              MethodDeclList RESULT =null;
		int mdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		MethodDecl md = (MethodDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int mdcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mdcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		MethodDeclList mdc = (MethodDeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							  if(mdc == null)
								mdc = new MethodDeclList();
								
							  mdc.addElement(md);
						   
							  RESULT = mdc;
						   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methodDeclarationChain",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // methodDeclaration ::= error RIGHTCURLY 
            {
              MethodDecl RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methodDeclaration",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // methodDeclaration ::= PUBLIC type identifier LEFTPAREN type identifier typeChainParen LEFTCURLY varDeclarationChain statementChain RETURN expression SEMICOLON RIGHTCURLY 
            {
              MethodDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-12)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Type t2 = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Identifier id2 = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int tcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		FormalList tc = (FormalList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int vdcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int vdcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		VarDeclList vdc = (VarDeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		StatementList sc = (StatementList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
						 //Wrap the additional type/id in a Formal
						 Formal temp = new Formal(t2, id2);
						 
						 //Add the first formal to the list, and then add all others from the TypeChain
						 FormalList list = new FormalList();
						 list.addElement(temp);
					  
						 for(int i = 0; i < tc.size(); i++)
						 {
							list.addElement(tc.elementAt(i));
						 }
					  
						 RESULT = new MethodDecl(t, id, list, vdc, sc, e1);
					  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methodDeclaration",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // methodDeclaration ::= PUBLIC type identifier LEFTPAREN RIGHTPAREN LEFTCURLY varDeclarationChain statementChain RETURN expression SEMICOLON RIGHTCURLY 
            {
              MethodDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int vdcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int vdcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		VarDeclList vdc = (VarDeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		StatementList sc = (StatementList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 FormalList list = new FormalList();
						 RESULT = new MethodDecl(t, id, list, vdc, sc, e1);
					  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methodDeclaration",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // varDeclarationChain ::= 
            {
              VarDeclList RESULT =null;
		 RESULT = new VarDeclList(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varDeclarationChain",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // varDeclarationChain ::= varDeclarationChain varDeclaration 
            {
              VarDeclList RESULT =null;
		int vdcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vdcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		VarDeclList vdc = (VarDeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		VarDecl vd = (VarDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							if(vdc == null)
								vdc = new VarDeclList();
							
							vdc.addElement(vd);
							
							RESULT = vdc;
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varDeclarationChain",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // varDeclaration ::= error identifier SEMICOLON 
            {
              VarDecl RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varDeclaration",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // varDeclaration ::= type error SEMICOLON 
            {
              VarDecl RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varDeclaration",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // varDeclaration ::= type identifier SEMICOLON 
            {
              VarDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new VarDecl(t, id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varDeclaration",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // classDeclarationChain ::= 
            {
              ClassDeclList RESULT =null;
		 RESULT = new ClassDeclList(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classDeclarationChain",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // classDeclarationChain ::= classDeclaration classDeclarationChain 
            {
              ClassDeclList RESULT =null;
		int cdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ClassDecl cd = (ClassDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cdcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cdcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ClassDeclList cdc = (ClassDeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
								if(cdc == null)
									cdc = new ClassDeclList();
								
								cdc.addElement(cd);
								
								RESULT = cdc;
						  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classDeclarationChain",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // classDeclaration ::= error RIGHTCURLY 
            {
              ClassDecl RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classDeclaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // classDeclaration ::= CLASS identifier EXTENDS identifier LEFTCURLY varDeclarationChain methodDeclarationChain RIGHTCURLY 
            {
              ClassDecl RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Identifier id1 = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Identifier id2 = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vdcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vdcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		VarDeclList vdc = (VarDeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mdcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mdcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		MethodDeclList mdc = (MethodDeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ClassDeclExtends(id1, id2, vdc, mdc); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classDeclaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // classDeclaration ::= CLASS identifier LEFTCURLY varDeclarationChain methodDeclarationChain RIGHTCURLY 
            {
              ClassDecl RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vdcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vdcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		VarDeclList vdc = (VarDeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mdcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mdcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		MethodDeclList mdc = (MethodDeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ClassDeclSimple(id, vdc, mdc); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classDeclaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // mainClass ::= CLASS identifier LEFTCURLY PUBLIC STATIC VOID MAIN LEFTPAREN STRING LEFTBRACKET RIGHTBRACKET identifier RIGHTPAREN LEFTCURLY RIGHTCURLY RIGHTCURLY 
            {
              MainClass RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)).right;
		Identifier id1 = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-14)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Identifier id2 = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 
				  RESULT = new MainClass(id1, id2, null);
			  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mainClass",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // mainClass ::= CLASS identifier LEFTCURLY PUBLIC STATIC VOID MAIN LEFTPAREN STRING LEFTBRACKET RIGHTBRACKET identifier RIGHTPAREN LEFTCURLY statement RIGHTCURLY RIGHTCURLY 
            {
              MainClass RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)).right;
		Identifier id1 = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-15)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Identifier id2 = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Statement stmt = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new MainClass(id1, id2, stmt); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mainClass",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-16)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= mainClass classDeclarationChain 
            {
              Program RESULT =null;
		int mcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		MainClass mc = (MainClass)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cdcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cdcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ClassDeclList cdc = (ClassDeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Program(mc, cdc); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

